version: '2.2'
services:
  postgres:
    image: postgres:13
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./initdb:/docker-entrypoint-initdb.d
    env_file:
      - ./app/config/.env
    healthcheck:
      test: [ "CMD-SHELL", "sh -c 'pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB'" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    expose:
      - "5432"
    networks:
      - app_network

  web:
    build: app
    command: >
      sh -c "python manage.py makemigrations \
        && python manage.py collectstatic --noinput \
        && python manage.py migrate \
        && cd sqlite_to_postgres && python load_data.py \
        && uwsgi --strict --ini uwsgi.ini"
    depends_on:
       postgres:
          condition: service_healthy
    env_file:
      - ./app/config/.env
    volumes:
      - static_volume:/app/static
    expose:
      - 8000
    networks:
      - app_network

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/site.conf:/etc/nginx/conf.d/site.conf:ro
      - static_volume:/app/static
    depends_on:
      - web
    networks:
      - app_network

  elastic:
    image: elasticsearch:8.6.2
    container_name: elastic
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms200m -Xmx200m
    restart: always
    expose:
      - 9200
    ports:
      - "9200:9200"
    healthcheck:
      test: [ "CMD-SHELL", "curl --silent --fail localhost:9200/_cluster/health || exit 1" ]
      interval: 10s
      timeout: 30s
      retries: 50
    networks:
      - app_network

  etl:
    build: postgres_to_es
    container_name: etl
    restart: always
    env_file: postgres_to_es/.env
    depends_on:
      web:
        condition: service_started
      postgres:
        condition: service_healthy
      elastic:
        condition: service_healthy
    entrypoint: [ "python", "main.py" ]
    networks:
      - app_network

volumes:
  postgres_data:
  static_volume:
networks:
  app_network:
